// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table genres {
  genre_id      bigint [pk]   // 콘서트 장르 아이디
  genre_name    varcahr       // 콘서트 장르 이름
  created_at    timestamp     // 콘서트 장르 등록일, 등록 시각
  updated_at    timestamp     // 콘서트 장르 수정일, 수정 시각
}

Table concert_basics {
  concert_basic_id    bigint [pk]   // 콘서트 아이디
  concert_name  varchar       // 콘서트 이름
  genre_id      bigint        // 콘서트 장르 아이디
  created_at    timestamp     // 콘서트 등록일, 등록 시각
  updated_at    timestamp     // 콘서트 수정일, 수정 시각
}

Ref: concert_basics.genre_id > genres.genre_id      // many-to-one

Table concert_detail_registers{
   concert_detail_register_id   bigint  [pk]    // 콘서트 상세 정보 등록자 아이디
   concert_detail_register_name varchar         // 콘서트 상세 정보 등록자 이름
   created_at                   timestamp       // 콘서트 상세 정보 등록자 생성일, 생성 시각
   updated_at                   timestamp       // 콘서트 상세 정보 등록자 수정일, 수정 시각
}

Table concert_detail_statuses{
  concert_detail_status_id   integer [pk]       // 콘서트 상세 정보 예약 상태 아이디
  concert_detail_status_name varchar            // 콘서트 상세 정보 예약 상태 이름 (reservable: 01, finished: 02)
}

Table concert_details{
  concert_detail_id           bigint    [pk]                    // 콘서트 상세 정보 아이디
  concert_basic_id            bigint    [unique]                // 콘서트 아이디
  concert_detail_status_id    integer   [default: 01]           // 콘서트 예약 가능 상태
  start_date                  timestamp [unique]                // 콘서트 시작일, 시작  시각
  end_datee                   timestamp [unique]                // 콘서트 종료일, 종료 시각
  concert_detail_register_id  varchar                           // 콘서트 상세 정보 등록자
  created_at                  timestamp                         // 콘서트 상세 정보 생성일, 생성 시각
  updated_at                  timestamp                         // 콘서트 상세 정보 수정일, 수정 시각
}

Ref: concert_details.concert_basic_id > concert_basics.concert_basic_id // many-to-one
Ref: concert_details.concert_detail_register_id > concert_detail_registers.concert_detail_register_id // many-to-one
Ref: concert_details.concert_detail_status_id > concert_detail_statuses.concert_detail_status_id      // many-to-one

Table artists{
  artist_id     bigint [pk]       // 공연자 정보 아이디
  artist_name   varchar           // 공연자 이름
  artist_age    integer           // 공연자 나이
  artist_gender varchar           // 공연자 성별
  created_at    timestamp         // 공연자 정보 생성일, 생성 시각
  updated_at    timestamp         // 공연자 정보 수정일, 수정 시각
}

Table casts{
  cast_id               bigint [pk]        // 콘서트 캐스팅 정보 아이디
  concert_detail_id     bigint             // 콘서트 상세 정보 아이디
  arist_id              bigint             // 콘서트 출연자 정보 아이디
  created_at            timestamp          // 콘서트 캐스팅 정보 생성일, 생성 시각
  updated_at            timestamp          // 콘서트 캐스팅 정보 수정일, 수정 시각
}

Ref: casts.concert_detail_id > concert_details.concert_detail_id // many-to-one
Ref: casts.arist_id > artists.artist_id                          // many-to-one

Table seat_statuses{
  seat_status_id    integer [pk]    // 좌석 예약 상태 아이디
  seat_status_name  varchar         // 좌석 예약 상태 이름 (reservable: 01, temp: 02, reserved: 03)
}

Table seats {
  seat_id             bigint   [pk]           // 좌석 아이디
  concert_detail_id   bigint   [unique]       // 콘서트 상세 정보 아이디
  seat_number         bigint   [unique]       // 좌석 번호
  seat_status_id      integer  [default: 01]  // 좌석 예약 상태 아이디
  price               integer                 // 콘서트  좌석 가격
  created_at          timestamp               // 좌석 생성일, 생성 시각
  updated_at          timestamp               // 좌석 정보 수정일, 수정 시각
}

Ref: seats.concert_detail_id > concert_details.concert_detail_id   // many-to-one
Ref: seats.seat_status_id > seat_statuses.seat_status_id           // many-to-one

Table members {
  member_id    varchar [pk]   // 회원 아이디, uuid
  balance      int            // 회원 잔고
  created_at   timestamp      // 회원 생성일, 생성 시각
  updated_at   timestamp      // 회원 정보 수정일, 수정 시각
}

Table waitings {
  waiting_id  bigint [pk]                  // 대기열 아이디
  member_id   varchar                      // 회원 아이디, uuid
  seat_id     bigint                       // 좌석 아이디
  status      varchar   [default: 'wait']  // 상태(wait or active)
  expired_at  timestamp                    // 만료 시각
  created_at  timestamp                    // 대기열 진입일, 진입 시각
  updated_at  timestamp                    // 대기 상태 수정일, 수정 시각
  deleted_at  timestamp                    // 대기 정보 삭제 시각
}

Ref: waitings.member_id > members.member_id   // many-to-one

Table reservation_statuses{
  reservation_status_id integer [pk]     // 회원의 좌석 예약 정보 상태 아이디
  reservation_status_name varchar        // 회원의 좌석 예약 정보 상태 이름 (temp: 01, paid: 02, cancled:03, watched:04, unwatched:05)
}

Table reservations {
  reservation_id        bigint [pk]                      // 콘서트 예약 아이디
  seat_id               bigint                           // 좌석 아이디
  member_id             bigint                           // 회원 아이디, uuid
  reservation_status_id integer [default: 01]            // 회원의 좌석 예약 정보 상태 아이디
  created_at            timestamp                        // 콘서트 예약 생성일, 생성 시각
  updated_at            timestamp                        // 콘서트 예약 수정일, 수정 시각
}

Ref: reservations.seat_id   > seats.seat_id      // many-to-one
Ref: reservations.member_id > members.member_id  // many-to-one
Ref: reservations.reservation_status_id > reservation_statuses.reservation_status_id // many-to-one






